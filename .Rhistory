f <- factor(col(g), levels = 1:2, labels = colnames(g))
table(Team = g, Venue = f)
} else {
# g <- data.frame(g, stringsAsFactors = FALSE) %>%
#   gather(key = Venue, value = Team, Home, Away) %>%
#   within(Venue <- format(substring(Venue, 0, 1),
#                          justify = "right",
#                          width = nchar(rounds[1]))) %>%
#   spread(key = Round, value = Venue)
Home <- cbind(g[, c("Round", "Home")], Venue = "Home")
Away <- cbind(g[, c("Round", "Away")], Venue = "Away")
g <- rbind(Home, Away)
colnames(g)[2] <- "Team"
g <- within(data.frame(g, stringsAsFactors = FALSE), {
Venue <- format(substring(Venue, 0, 1),
justify = "right",
width = nchar(rounds[1]))
})
teams <- with(g, sort(unique(Team)))
rounds <- with(g, sort(unique(Round)))
out <- matrix(NA_character_, length(teams), length(rounds))
dimnames(out) <- list(Team = teams, Round = rounds)
ij <- with(g, cbind(match(Team, teams), match(Round, rounds)))
out[ij] <- g$Venue
# out <- as.matrix(g[, -1])
out[is.na(out)] <- format("*", width = nchar(rounds[1]),
justify = "right")
# rownames(out) <- g[["Team"]]
noquote(out)
}
}
round_robin(Anwesende$Name)
x <- round_robin(Anwesende$Name)
print.round_robin(x)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
#Library
library(readr)
library(readxl)
options(max.print = 99999)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
source("src\Skripten/round_robin.R")
#Networking Generator
#popsize <- as.numeric(nrow(Anwesende))
#moeglichePaare<- popsize*(popsize-1)/2
#Pairings<- replicate(1000, split(sample(Anwesende$Name),rep(1:(popsize/2),each=2)))
#Paare <- unique(lapply(Pairings, sort))
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
#Library
library(readr)
library(readxl)
options(max.print = 99999)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
source("src/Skripten/round_robin.R")
#Networking Generator
#popsize <- as.numeric(nrow(Anwesende))
#moeglichePaare<- popsize*(popsize-1)/2
#Pairings<- replicate(1000, split(sample(Anwesende$Name),rep(1:(popsize/2),each=2)))
#Paare <- unique(lapply(Pairings, sort))
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
#Library
library(readr)
library(readxl)
options(max.print = 99999)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
source("src/Skripten/round_robin.R")
#Networking Generator
#popsize <- as.numeric(nrow(Anwesende))
#moeglichePaare<- popsize*(popsize-1)/2
#Pairings<- replicate(1000, split(sample(Anwesende$Name),rep(1:(popsize/2),each=2)))
#Paare <- unique(lapply(Pairings, sort))
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
source("src/Skripten/round_robin.R")
x <- round_robin(Anwesende$Name)
print.round_robin(x)
source("src/Skripten/round_robin.R")
x <- round_robin(Anwesende$Name)
print.round_robin(x)
source("src/Skripten/round_robin.R")
x <- round_robin(Anwesende$Name)
print.round_robin(x)
source("src/Skripten/round_robin.R")
x <- round_robin(Anwesende$Name)
print.round_robin(x)
#Library
library(readr)
library(readxl)
options(max.print = 99999)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
source("src/Skripten/round_robin.R")
#Networking Generator
#popsize <- as.numeric(nrow(Anwesende))
#moeglichePaare<- popsize*(popsize-1)/2
#Pairings<- replicate(1000, split(sample(Anwesende$Name),rep(1:(popsize/2),each=2)))
#Paare <- unique(lapply(Pairings, sort))
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
#Library
library(readr)
library(readxl)
options(max.print = 99999)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
source("src/Skripten/round_robin.R")
#Networking Generator
#popsize <- as.numeric(nrow(Anwesende))
#moeglichePaare<- popsize*(popsize-1)/2
#Pairings<- replicate(1000, split(sample(Anwesende$Name),rep(1:(popsize/2),each=2)))
#Paare <- unique(lapply(Pairings, sort))
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
#Library
library(readr)
library(readxl)
options(max.print = 99999)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
source("src/Skripten/round_robin.R")
#Networking Generator
#popsize <- as.numeric(nrow(Anwesende))
#moeglichePaare<- popsize*(popsize-1)/2
#Pairings<- replicate(1000, split(sample(Anwesende$Name),rep(1:(popsize/2),each=2)))
#Paare <- unique(lapply(Pairings, sort))
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
#Library
library(readr)
library(readxl)
options(max.print = 99999)
#Daten laden
Anwesende <- read_excel("Daten/Events/Networking.xlsx")
source("src/Skripten/round_robin.R")
#Networking Generator
#popsize <- as.numeric(nrow(Anwesende))
#moeglichePaare<- popsize*(popsize-1)/2
#Pairings<- replicate(1000, split(sample(Anwesende$Name),rep(1:(popsize/2),each=2)))
#Paare <- unique(lapply(Pairings, sort))
x <- round_robin(Anwesende$Name)
print.round_robin(x)
sink("Export/Paare.txt")
#cat(paste("Anzahl an Paaren pro Runde", round(popsize/2)))
cat("\n")
cat("\n")
print.round_robin(x)
#writeLines(formatOL(Paare))
#cat("\n")
#print.data.frame(Anwesende)
sink()
#Automation Bot
#set wd
setwd("Z:/01 Projekte_Alumni/alma/Allgemeine statistiken/alma_stat_auszug")
#Daten kopieren
detailsmen = file.info(list.files("Z:/Downloads/", pattern="almamentorings_", full.names = TRUE))
detailsmen = detailsmen[with(detailsmen, order(as.POSIXct(mtime), decreasing = TRUE)), ]
namemen<- detailsmen[1, ]
datummen <- detailsmen[1, ]
namemen <- cbind(rownames(namemen), namemen)
rownames(namemen) <- NULL
colnames(namemen) <- ("Datennamementorings")
file.rename(from = namemen$Datennamementorings, to =paste0(getwd(), "/Daten/almamentorings.csv"))
details = file.info(list.files("Z:/Downloads/", pattern="almausers_", full.names = TRUE))
details = details[with(details, order(as.POSIXct(mtime), decreasing = TRUE)), ]
name<- details[1, ]
datum <- details[1, ]
name <- cbind(rownames(name), name)
rownames(name) <- NULL
colnames(name) <- ("Datenname")
file.rename(from = name$Datenname, to =paste0(getwd(), "/Daten/almausers.csv"))
#Cleanup
do.call(file.remove, list(list.files("Export", full.names = TRUE)))
#Uni Wien
source("src/Skripten/Listen_Bot.R", echo = FALSE, verbose = FALSE)
#source("src/Skripten/Eventauszug.R", echo = FALSE, verbose = FALSE)
rmarkdown::render("alma_Statistiken_prodv1.6.Rmd", output_dir = "Export")
#Cleanup
rm(list = ls())
source("Z:/01 Projekte_Alumni/alma/Allgemeine statistiken/alma_stat_auszug/src/Skripten/neue_User_nach_Event.R")
detailsmen = file.info(list.files("Z:/Downloads/", pattern="almamentorings_", full.names = TRUE))
detailsmen = detailsmen[with(detailsmen, order(as.POSIXct(mtime), decreasing = TRUE)), ]
namemen<- detailsmen[1, ]
datummen <- detailsmen[1, ]
namemen <- cbind(rownames(namemen), namemen)
rownames(namemen) <- NULL
colnames(namemen) <- ("Datennamementorings")
file.rename(from = namemen$Datennamementorings, to =paste0(getwd(), "/Daten/almamentorings.csv"))
details = file.info(list.files("Z:/Downloads/", pattern="almausers_", full.names = TRUE))
details = details[with(details, order(as.POSIXct(mtime), decreasing = TRUE)), ]
name<- details[1, ]
datum <- details[1, ]
name <- cbind(rownames(name), name)
rownames(name) <- NULL
colnames(name) <- ("Datenname")
file.rename(from = name$Datenname, to =paste0(getwd(), "/Daten/almausers.csv"))
source("/src/Skripten/neue_User_nach_Event")
source("src/Skripten/Env.R")
#Uni Wien
Eventanmeldungen("11-02-2022")
source("/src/Skripten/neue_User_nach_Event")
getwd()
source("src/Skripten/neue_User_nach_Event")
source("src/Skripten/neue_User_nach_Event.R")
#Uni Wien
Eventanmeldungen("11-02-2022")
source("src/Skripten/neue_User_nach_Event.R")
#Uni Wien
Eventanmeldungen("11-02-2022")
View(df_users)
#Uni Wien
Eventanmeldungen("2022-02-01") #Jahr-Monat-Tag
#Uni Wien
letztes_Event <- "2022-01-01" #Jahr-Monat-Tag
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
source("src/Skripten/letztes_Event.R")
#Uni Wien
letztes_Event <- "2022-01-01" #Jahr-Monat-Tag
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
source("src/Skripten/letztes_Event.R")
#Uni Wien
letztes_Event <- "2022-01-01" #Jahr-Monat-Tag
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
source("src/Skripten/letztes_Event.R")
#Uni Wien
letztes_Event <- "2022-04-27" #Jahr-Monat-Tag
Event_name <- "Speed Networking"
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
saveRDS(Event_name, file = "src/Objects/Even_name.rds")
source("src/Skripten/letztes_Event.R")
saveRDS(Event_name, file = "src/Objects/Event_name.rds")
source("src/Skripten/letztes_Event.R")
#Uni Wien
letztes_Event <- "2022-01-01" #Jahr-Monat-Tag
Event_name <- "Speed Networking"
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
saveRDS(Event_name, file = "src/Objects/Event_name.rds")
source("src/Skripten/letztes_Event.R")
#Uni Wien
letztes_Event <- "2022-01-01" #Jahr-Monat-Tag
Event_name <- "Speed Networking"
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
saveRDS(Event_name, file = "src/Objects/Event_name.rds")
source("src/Skripten/letztes_Event.R")
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
comment = NA
)
source("src/Skripten/Env.R")
source("src/Skripten/neue_User_nach_Event.R")
Auszugusers = file.info("Daten/almausers.csv")
Auszugmentorings = file.info("Daten/almamentorings.csv")
#ladet die Objekte aus dem Automation Bot
letztes_Event<- readRDS(file = "src/Objects/letztes_Event.rds")
Event_name<- readRDS(file = "src/Objects/Event_name.rds")
#Führt die Funktion aus
Eventanmeldungen(letztes_Event,Event_name )
#ladet die Objekte aus dem Automation Bot
letztes_Event<- readRDS(file = "src/Objects/letztes_Event.rds")
Event_name<- readRDS(file = "src/Objects/Event_name.rds")
#Führt die Funktion aus
Beitritte_Mentees <- subset(Mentees, Mentees$registered >= letztes_Event)
Beitritte_Mentoren <- subset(Mentoren, Mentoren$registered >= letztes_Event)
Beitritte <- subset(df_users, df_users$registered >= letztes_Event)
Beitrittegraf <- c(nrow(Betritte_Mentoren), nrow(Betritte_Mentees))
#ladet die Objekte aus dem Automation Bot
letztes_Event<- readRDS(file = "src/Objects/letztes_Event.rds")
Event_name<- readRDS(file = "src/Objects/Event_name.rds")
#Führt die Funktion aus
Beitritte_Mentees <- subset(Mentees, Mentees$registered >= letztes_Event)
Beitritte_Mentoren <- subset(Mentoren, Mentoren$registered >= letztes_Event)
Beitritte <- subset(df_users, df_users$registered >= letztes_Event)
Beitrittegraf <- c(nrow(Betritte_Mentoren), nrow(Betritte_Mentees))
Beitrittegraf <- c(nrow(Beitritte_Mentoren), nrow(Betritte_Mentees))
Beitrittegraf <- c(nrow(Beitritte_Mentoren), nrow(Beitritte_Mentees))
ggplot2::ggplot(ggplot2::aes(Beitrittegraf)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
ggplot2::ggplot(data= Beitrittegraf, ggplot2::aes(Beitrittegraf)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
plot(Beitrittegraf)
barplot(Beitrittegraf)
ggplot2::ggplot(ggplot2::aes(Beitrittegraf)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
barplot(Beitrittegraf)
Beitrittegraf <- as.data.frame(Beitrittegraf)
View(Beitrittegraf)
ggplot2::ggplot(data=Beitrittegraf, ggplot2::aes(Beitrittegraf$Beitrittegraf)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
ggplot2::ggplot(data=Beitrittegraf, ggplot2::aes(Beitrittegraf)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
View(Beitrittegraf)
xs <-Beitrittegraf
ggplot2::ggplot(data=Beitrittegraf, ggplot2::aes(xs)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
Beitrittegraf <- c(nrow(Beitritte_Mentoren), nrow(Beitritte_Mentees))
xs <-Beitrittegraf
ggplot2::ggplot(data=Beitrittegraf, ggplot2::aes(xs)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
Beitrittegraf <- c(nrow(Beitritte_Mentoren), nrow(Beitritte_Mentees))
xs <-Beitrittegraf
Beitrittegraf <- as.data.frame(Beitrittegraf)
ggplot2::ggplot(data=Beitrittegraf, ggplot2::aes(xs)) +
ggplot2::geom_bar(fill = ("#A81334"),
alpha = 0.8) +
ggplot2::stat_count(geom="text", ggplot2::aes(label=..count..), vjust=-0.5) +
ggplot2::labs(x = "Geschlecht", y = "Anzahl")
barplot(Beitrittegraf,
col="#A81334")
Beitrittegraf <- c(nrow(Beitritte_Mentoren), nrow(Beitritte_Mentees))
#xs <-Beitrittegraf
#Beitrittegraf <- as.data.frame(Beitrittegraf)
barplot(Beitrittegraf,
col="#A81334")
#xs <-Beitrittegraf
#Beitrittegraf <- as.data.frame(Beitrittegraf)
barplot(Beitrittegraf,
col="#A81334",
ylab = "Anzahl",
xlab = "Gruppen",
names = c("Mentoren", "Mentees")
)
#xs <-Beitrittegraf
#Beitrittegraf <- as.data.frame(Beitrittegraf)
my_bar <- barplot(Beitrittegraf,
col="#A81334",
ylab = "Anzahl",
xlab = "Gruppen",
names = c("Mentoren", "Mentees")
)
text(my_bar, paste("n: ", Beitrittegraf, sep="") ,cex=1)
View(df_users)
View(Mentees)
install.packages(c("cli", "dplyr", "ps", "rmarkdown", "testthat", "uuid"))
source("src/Skripten/Env.R")
################################################################################
Mentees_clean <- subset(Mentees, Mentees$inactive == "No")
Mentees_inaktiv <- subset(Mentees_clean, !(Mentees_clean$email %in%
Mentorships_clean$`email (mentee)`))
nrow(Mentees_inaktiv)
source("Z:/01 Projekte_Alumni/alma/Allgemeine statistiken/alma_stat_auszug/Automation Bot.R")
install.packages("httr")
install.packages("cli")
install.packages("xfun")
source("src/Skripten/Env.R")
install.packages(c("cli", "roxygen2", "tinytex", "xfun"))
#Automation Bot
#set wd
setwd("Z:/01 Projekte_Alumni/alma/Allgemeine statistiken/alma_stat_auszug")
#Daten kopieren
detailsmen = file.info(list.files("Z:/Downloads/", pattern="almamentorings_", full.names = TRUE))
detailsmen = detailsmen[with(detailsmen, order(as.POSIXct(mtime), decreasing = TRUE)), ]
namemen<- detailsmen[1, ]
datummen <- detailsmen[1, ]
namemen <- cbind(rownames(namemen), namemen)
rownames(namemen) <- NULL
colnames(namemen) <- ("Datennamementorings")
file.rename(from = namemen$Datennamementorings, to =paste0(getwd(), "/Daten/almamentorings.csv"))
details = file.info(list.files("Z:/Downloads/", pattern="almausers_", full.names = TRUE))
details = details[with(details, order(as.POSIXct(mtime), decreasing = TRUE)), ]
name<- details[1, ]
datum <- details[1, ]
name <- cbind(rownames(name), name)
rownames(name) <- NULL
colnames(name) <- ("Datenname")
file.rename(from = name$Datenname, to =paste0(getwd(), "/Daten/almausers.csv"))
#Cleanup
do.call(file.remove, list(list.files("Export", full.names = TRUE)))
#Uni Wien
letztes_Event <- "2022-01-01" #Jahr-Monat-Tag
Event_name <- "Speed Networking"
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
saveRDS(Event_name, file = "src/Objects/Event_name.rds")
source("src/Skripten/letztes_Event.R")
source("src/Skripten/Listen_Bot.R", echo = FALSE, verbose = FALSE)
#source("src/Skripten/Eventauszug.R", echo = FALSE, verbose = FALSE)
rmarkdown::render("alma_Statistiken_prodv1.6.Rmd", output_dir = "Export")
rmarkdown::render("alma_Eventanmeldungen_prodv1.0.Rmd", output_dir = "Export")
rmarkdown::render("interne_Statistiken.Rmd", output_dir = "Export")
#Cleanup
rm(list = ls())
#Automation Bot
#set wd
setwd("Z:/01 Projekte_Alumni/alma/Allgemeine statistiken/alma_stat_auszug")
#Daten kopieren
detailsmen = file.info(list.files("Z:/Downloads/", pattern="almamentorings_", full.names = TRUE))
detailsmen = detailsmen[with(detailsmen, order(as.POSIXct(mtime), decreasing = TRUE)), ]
namemen<- detailsmen[1, ]
datummen <- detailsmen[1, ]
namemen <- cbind(rownames(namemen), namemen)
rownames(namemen) <- NULL
colnames(namemen) <- ("Datennamementorings")
file.rename(from = namemen$Datennamementorings, to =paste0(getwd(), "/Daten/almamentorings.csv"))
details = file.info(list.files("Z:/Downloads/", pattern="almausers_", full.names = TRUE))
details = details[with(details, order(as.POSIXct(mtime), decreasing = TRUE)), ]
name<- details[1, ]
datum <- details[1, ]
name <- cbind(rownames(name), name)
rownames(name) <- NULL
colnames(name) <- ("Datenname")
file.rename(from = name$Datenname, to =paste0(getwd(), "/Daten/almausers.csv"))
#Cleanup
do.call(file.remove, list(list.files("Export", full.names = TRUE)))
#Uni Wien
letztes_Event <- "2022-01-01" #Jahr-Monat-Tag
Event_name <- "Speed Networking"
saveRDS(letztes_Event, file = "src/Objects/letztes_Event.rds")
saveRDS(Event_name, file = "src/Objects/Event_name.rds")
source("src/Skripten/letztes_Event.R")
source("src/Skripten/Listen_Bot.R", echo = FALSE, verbose = FALSE)
#source("src/Skripten/Eventauszug.R", echo = FALSE, verbose = FALSE)
rmarkdown::render("alma_Statistiken_prodv1.6.Rmd", output_dir = "Export")
rmarkdown::render("alma_Eventanmeldungen_prodv1.0.Rmd", output_dir = "Export")
rmarkdown::render("interne_Statistiken.Rmd", output_dir = "Export")
#Cleanup
rm(list = ls())
install.packages(c("broom", "callr", "cluster", "dplyr", "dtplyr", "forcats", "gtable", "haven", "hms", "httr", "knitr", "modelr", "pillar", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rvest", "scales", "stringr", "tinytex", "viridisLite"))
install.packages(c("cli", "cpp11", "crayon", "curl", "data.table", "digest", "evaluate", "foreign", "gargle", "isoband", "jsonlite", "lifecycle", "markdown", "Matrix", "mgcv", "nlme", "nnet", "openssl", "processx", "ps", "purrr", "readr", "rlang", "rmarkdown", "rpart", "sys", "tidyr", "tidyselect", "tinytex", "vctrs", "vroom", "xfun", "yaml"))
install.packages(c("bslib", "callr", "evaluate", "ggplot2", "lubridate", "rmarkdown"))
setwd("~/Documents/05 Code Repos/Docker_repos/R_Renderengine")
